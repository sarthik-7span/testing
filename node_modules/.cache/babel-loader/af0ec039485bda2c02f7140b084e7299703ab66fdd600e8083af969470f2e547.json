{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([413, 429, 503]);\nconst calculateRetryDelay = ({\n  attemptCount,\n  retryOptions,\n  error,\n  retryAfter\n}) => {\n  if (attemptCount > retryOptions.limit) {\n    return 0;\n  }\n  const hasMethod = retryOptions.methods.includes(error.options.method);\n  const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n  const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n  if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n    return 0;\n  }\n  if (error.response) {\n    if (retryAfter) {\n      if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n        return 0;\n      }\n      return retryAfter;\n    }\n    if (error.response.statusCode === 413) {\n      return 0;\n    }\n  }\n  const noise = Math.random() * 100;\n  return 2 ** (attemptCount - 1) * 1000 + noise;\n};\nexports.default = calculateRetryDelay;","map":{"version":3,"names":["Object","defineProperty","exports","value","retryAfterStatusCodes","Set","calculateRetryDelay","attemptCount","retryOptions","error","retryAfter","limit","hasMethod","methods","includes","options","method","hasErrorCode","errorCodes","code","hasStatusCode","response","statusCodes","statusCode","maxRetryAfter","undefined","noise","Math","random","default"],"sources":["/home/spartan/Documents/vue.js/demo/node_modules/got/dist/source/core/calculate-retry-delay.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([413, 429, 503]);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter }) => {\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return ((2 ** (attemptCount - 1)) * 1000) + noise;\n};\nexports.default = calculateRetryDelay;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtCF,OAAO,CAACE,qBAAqB,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACxD,MAAMC,mBAAmB,GAAG,CAAC;EAAEC,YAAY;EAAEC,YAAY;EAAEC,KAAK;EAAEC;AAAW,CAAC,KAAK;EAC/E,IAAIH,YAAY,GAAGC,YAAY,CAACG,KAAK,EAAE;IACnC,OAAO,CAAC;EACZ;EACA,MAAMC,SAAS,GAAGJ,YAAY,CAACK,OAAO,CAACC,QAAQ,CAACL,KAAK,CAACM,OAAO,CAACC,MAAM,CAAC;EACrE,MAAMC,YAAY,GAAGT,YAAY,CAACU,UAAU,CAACJ,QAAQ,CAACL,KAAK,CAACU,IAAI,CAAC;EACjE,MAAMC,aAAa,GAAGX,KAAK,CAACY,QAAQ,IAAIb,YAAY,CAACc,WAAW,CAACR,QAAQ,CAACL,KAAK,CAACY,QAAQ,CAACE,UAAU,CAAC;EACpG,IAAI,CAACX,SAAS,IAAK,CAACK,YAAY,IAAI,CAACG,aAAc,EAAE;IACjD,OAAO,CAAC;EACZ;EACA,IAAIX,KAAK,CAACY,QAAQ,EAAE;IAChB,IAAIX,UAAU,EAAE;MACZ,IAAIF,YAAY,CAACgB,aAAa,KAAKC,SAAS,IAAIf,UAAU,GAAGF,YAAY,CAACgB,aAAa,EAAE;QACrF,OAAO,CAAC;MACZ;MACA,OAAOd,UAAU;IACrB;IACA,IAAID,KAAK,CAACY,QAAQ,CAACE,UAAU,KAAK,GAAG,EAAE;MACnC,OAAO,CAAC;IACZ;EACJ;EACA,MAAMG,KAAK,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG;EACjC,OAAS,CAAC,KAAKrB,YAAY,GAAG,CAAC,CAAC,GAAI,IAAI,GAAImB,KAAK;AACrD,CAAC;AACDxB,OAAO,CAAC2B,OAAO,GAAGvB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}