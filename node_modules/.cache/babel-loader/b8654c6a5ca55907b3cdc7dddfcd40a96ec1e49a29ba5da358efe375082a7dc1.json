{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst http2 = require('http2');\nconst {\n  Writable\n} = require('stream');\nconst {\n  Agent,\n  globalAgent\n} = require('./agent');\nconst IncomingMessage = require('./incoming-message');\nconst urlToOptions = require('./utils/url-to-options');\nconst proxyEvents = require('./utils/proxy-events');\nconst isRequestPseudoHeader = require('./utils/is-request-pseudo-header');\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_PROTOCOL,\n  ERR_HTTP_HEADERS_SENT,\n  ERR_INVALID_HTTP_TOKEN,\n  ERR_HTTP_INVALID_HEADER_VALUE,\n  ERR_INVALID_CHAR\n} = require('./utils/errors');\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_METHOD_CONNECT\n} = http2.constants;\nconst kHeaders = Symbol('headers');\nconst kOrigin = Symbol('origin');\nconst kSession = Symbol('session');\nconst kOptions = Symbol('options');\nconst kFlushedHeaders = Symbol('flushedHeaders');\nconst kJobs = Symbol('jobs');\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nclass ClientRequest extends Writable {\n  constructor(input, options, callback) {\n    super({\n      autoDestroy: false\n    });\n    const hasInput = typeof input === 'string' || input instanceof URL;\n    if (hasInput) {\n      input = urlToOptions(input instanceof URL ? input : new URL(input));\n    }\n    if (typeof options === 'function' || options === undefined) {\n      // (options, callback)\n      callback = options;\n      options = hasInput ? input : {\n        ...input\n      };\n    } else {\n      // (input, options, callback)\n      options = {\n        ...input,\n        ...options\n      };\n    }\n    if (options.h2session) {\n      this[kSession] = options.h2session;\n    } else if (options.agent === false) {\n      this.agent = new Agent({\n        maxFreeSessions: 0\n      });\n    } else if (typeof options.agent === 'undefined' || options.agent === null) {\n      if (typeof options.createConnection === 'function') {\n        // This is a workaround - we don't have to create the session on our own.\n        this.agent = new Agent({\n          maxFreeSessions: 0\n        });\n        this.agent.createConnection = options.createConnection;\n      } else {\n        this.agent = globalAgent;\n      }\n    } else if (typeof options.agent.request === 'function') {\n      this.agent = options.agent;\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('options.agent', ['Agent-like Object', 'undefined', 'false'], options.agent);\n    }\n    if (options.protocol && options.protocol !== 'https:') {\n      throw new ERR_INVALID_PROTOCOL(options.protocol, 'https:');\n    }\n    const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;\n    const host = options.hostname || options.host || 'localhost';\n\n    // Don't enforce the origin via options. It may be changed in an Agent.\n    delete options.hostname;\n    delete options.host;\n    delete options.port;\n    const {\n      timeout\n    } = options;\n    options.timeout = undefined;\n    this[kHeaders] = Object.create(null);\n    this[kJobs] = [];\n    this.socket = null;\n    this.connection = null;\n    this.method = options.method || 'GET';\n    this.path = options.path;\n    this.res = null;\n    this.aborted = false;\n    this.reusedSocket = false;\n    if (options.headers) {\n      for (const [header, value] of Object.entries(options.headers)) {\n        this.setHeader(header, value);\n      }\n    }\n    if (options.auth && !('authorization' in this[kHeaders])) {\n      this[kHeaders].authorization = 'Basic ' + Buffer.from(options.auth).toString('base64');\n    }\n    options.session = options.tlsSession;\n    options.path = options.socketPath;\n    this[kOptions] = options;\n\n    // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n    if (port === 443) {\n      this[kOrigin] = `https://${host}`;\n      if (!(':authority' in this[kHeaders])) {\n        this[kHeaders][':authority'] = host;\n      }\n    } else {\n      this[kOrigin] = `https://${host}:${port}`;\n      if (!(':authority' in this[kHeaders])) {\n        this[kHeaders][':authority'] = `${host}:${port}`;\n      }\n    }\n    if (timeout) {\n      this.setTimeout(timeout);\n    }\n    if (callback) {\n      this.once('response', callback);\n    }\n    this[kFlushedHeaders] = false;\n  }\n  get method() {\n    return this[kHeaders][HTTP2_HEADER_METHOD];\n  }\n  set method(value) {\n    if (value) {\n      this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n    }\n  }\n  get path() {\n    return this[kHeaders][HTTP2_HEADER_PATH];\n  }\n  set path(value) {\n    if (value) {\n      this[kHeaders][HTTP2_HEADER_PATH] = value;\n    }\n  }\n  get _mustNotHaveABody() {\n    return this.method === 'GET' || this.method === 'HEAD' || this.method === 'DELETE';\n  }\n  _write(chunk, encoding, callback) {\n    // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n    if (this._mustNotHaveABody) {\n      callback(new Error('The GET, HEAD and DELETE methods must NOT have a body'));\n      /* istanbul ignore next: Node.js 12 throws directly */\n      return;\n    }\n    this.flushHeaders();\n    const callWrite = () => this._request.write(chunk, encoding, callback);\n    if (this._request) {\n      callWrite();\n    } else {\n      this[kJobs].push(callWrite);\n    }\n  }\n  _final(callback) {\n    if (this.destroyed) {\n      return;\n    }\n    this.flushHeaders();\n    const callEnd = () => {\n      // For GET, HEAD and DELETE\n      if (this._mustNotHaveABody) {\n        callback();\n        return;\n      }\n      this._request.end(callback);\n    };\n    if (this._request) {\n      callEnd();\n    } else {\n      this[kJobs].push(callEnd);\n    }\n  }\n  abort() {\n    if (this.res && this.res.complete) {\n      return;\n    }\n    if (!this.aborted) {\n      process.nextTick(() => this.emit('abort'));\n    }\n    this.aborted = true;\n    this.destroy();\n  }\n  _destroy(error, callback) {\n    if (this.res) {\n      this.res._dump();\n    }\n    if (this._request) {\n      this._request.destroy();\n    }\n    callback(error);\n  }\n  async flushHeaders() {\n    if (this[kFlushedHeaders] || this.destroyed) {\n      return;\n    }\n    this[kFlushedHeaders] = true;\n    const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n\n    // The real magic is here\n    const onStream = stream => {\n      this._request = stream;\n      if (this.destroyed) {\n        stream.destroy();\n        return;\n      }\n\n      // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n      if (!isConnectMethod) {\n        proxyEvents(stream, this, ['timeout', 'continue', 'close', 'error']);\n      }\n\n      // Wait for the `finish` event. We don't want to emit the `response` event\n      // before `request.end()` is called.\n      const waitForEnd = fn => {\n        return (...args) => {\n          if (!this.writable && !this.destroyed) {\n            fn(...args);\n          } else {\n            this.once('finish', () => {\n              fn(...args);\n            });\n          }\n        };\n      };\n\n      // This event tells we are ready to listen for the data.\n      stream.once('response', waitForEnd((headers, flags, rawHeaders) => {\n        // If we were to emit raw request stream, it would be as fast as the native approach.\n        // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n        const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n        this.res = response;\n        response.req = this;\n        response.statusCode = headers[HTTP2_HEADER_STATUS];\n        response.headers = headers;\n        response.rawHeaders = rawHeaders;\n        response.once('end', () => {\n          if (this.aborted) {\n            response.aborted = true;\n            response.emit('aborted');\n          } else {\n            response.complete = true;\n\n            // Has no effect, just be consistent with the Node.js behavior\n            response.socket = null;\n            response.connection = null;\n          }\n        });\n        if (isConnectMethod) {\n          response.upgrade = true;\n\n          // The HTTP1 API says the socket is detached here,\n          // but we can't do that so we pass the original HTTP2 request.\n          if (this.emit('connect', response, stream, Buffer.alloc(0))) {\n            this.emit('close');\n          } else {\n            // No listeners attached, destroy the original request.\n            stream.destroy();\n          }\n        } else {\n          // Forwards data\n          stream.on('data', chunk => {\n            if (!response._dumped && !response.push(chunk)) {\n              stream.pause();\n            }\n          });\n          stream.once('end', () => {\n            response.push(null);\n          });\n          if (!this.emit('response', response)) {\n            // No listeners attached, dump the response.\n            response._dump();\n          }\n        }\n      }));\n\n      // Emits `information` event\n      stream.once('headers', waitForEnd(headers => this.emit('information', {\n        statusCode: headers[HTTP2_HEADER_STATUS]\n      })));\n      stream.once('trailers', waitForEnd((trailers, flags, rawTrailers) => {\n        const {\n          res\n        } = this;\n\n        // Assigns trailers to the response object.\n        res.trailers = trailers;\n        res.rawTrailers = rawTrailers;\n      }));\n      const {\n        socket\n      } = stream.session;\n      this.socket = socket;\n      this.connection = socket;\n      for (const job of this[kJobs]) {\n        job();\n      }\n      this.emit('socket', this.socket);\n    };\n\n    // Makes a HTTP2 request\n    if (this[kSession]) {\n      try {\n        onStream(this[kSession].request(this[kHeaders]));\n      } catch (error) {\n        this.emit('error', error);\n      }\n    } else {\n      this.reusedSocket = true;\n      try {\n        onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }\n  }\n  getHeader(name) {\n    if (typeof name !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n    }\n    return this[kHeaders][name.toLowerCase()];\n  }\n  get headersSent() {\n    return this[kFlushedHeaders];\n  }\n  removeHeader(name) {\n    if (typeof name !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n    }\n    if (this.headersSent) {\n      throw new ERR_HTTP_HEADERS_SENT('remove');\n    }\n    delete this[kHeaders][name.toLowerCase()];\n  }\n  setHeader(name, value) {\n    if (this.headersSent) {\n      throw new ERR_HTTP_HEADERS_SENT('set');\n    }\n    if (typeof name !== 'string' || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n      throw new ERR_INVALID_HTTP_TOKEN('Header name', name);\n    }\n    if (typeof value === 'undefined') {\n      throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n    }\n    if (isInvalidHeaderValue.test(value)) {\n      throw new ERR_INVALID_CHAR('header content', name);\n    }\n    this[kHeaders][name.toLowerCase()] = value;\n  }\n  setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n  }\n  setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n  }\n  setTimeout(ms, callback) {\n    const applyTimeout = () => this._request.setTimeout(ms, callback);\n    if (this._request) {\n      applyTimeout();\n    } else {\n      this[kJobs].push(applyTimeout);\n    }\n    return this;\n  }\n  get maxHeadersCount() {\n    if (!this.destroyed && this._request) {\n      return this._request.session.localSettings.maxHeaderListSize;\n    }\n    return undefined;\n  }\n  set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n  }\n}\nmodule.exports = ClientRequest;","map":{"version":3,"names":["http2","require","Writable","Agent","globalAgent","IncomingMessage","urlToOptions","proxyEvents","isRequestPseudoHeader","ERR_INVALID_ARG_TYPE","ERR_INVALID_PROTOCOL","ERR_HTTP_HEADERS_SENT","ERR_INVALID_HTTP_TOKEN","ERR_HTTP_INVALID_HEADER_VALUE","ERR_INVALID_CHAR","HTTP2_HEADER_STATUS","HTTP2_HEADER_METHOD","HTTP2_HEADER_PATH","HTTP2_METHOD_CONNECT","constants","kHeaders","Symbol","kOrigin","kSession","kOptions","kFlushedHeaders","kJobs","isValidHttpToken","isInvalidHeaderValue","ClientRequest","constructor","input","options","callback","autoDestroy","hasInput","URL","undefined","h2session","agent","maxFreeSessions","createConnection","request","protocol","port","defaultPort","host","hostname","timeout","Object","create","socket","connection","method","path","res","aborted","reusedSocket","headers","header","value","entries","setHeader","auth","authorization","Buffer","from","toString","session","tlsSession","socketPath","setTimeout","once","toUpperCase","_mustNotHaveABody","_write","chunk","encoding","Error","flushHeaders","callWrite","_request","write","push","_final","destroyed","callEnd","end","abort","complete","process","nextTick","emit","destroy","_destroy","error","_dump","isConnectMethod","onStream","stream","waitForEnd","fn","args","writable","flags","rawHeaders","response","readableHighWaterMark","req","statusCode","upgrade","alloc","on","_dumped","pause","trailers","rawTrailers","job","getHeader","name","toLowerCase","headersSent","removeHeader","test","setNoDelay","setSocketKeepAlive","ms","applyTimeout","maxHeadersCount","localSettings","maxHeaderListSize","_value","module","exports"],"sources":["/home/spartan/Documents/vue.js/demo/node_modules/http2-wrapper/source/client-request.js"],"sourcesContent":["'use strict';\nconst http2 = require('http2');\nconst {Writable} = require('stream');\nconst {Agent, globalAgent} = require('./agent');\nconst IncomingMessage = require('./incoming-message');\nconst urlToOptions = require('./utils/url-to-options');\nconst proxyEvents = require('./utils/proxy-events');\nconst isRequestPseudoHeader = require('./utils/is-request-pseudo-header');\nconst {\n\tERR_INVALID_ARG_TYPE,\n\tERR_INVALID_PROTOCOL,\n\tERR_HTTP_HEADERS_SENT,\n\tERR_INVALID_HTTP_TOKEN,\n\tERR_HTTP_INVALID_HEADER_VALUE,\n\tERR_INVALID_CHAR\n} = require('./utils/errors');\n\nconst {\n\tHTTP2_HEADER_STATUS,\n\tHTTP2_HEADER_METHOD,\n\tHTTP2_HEADER_PATH,\n\tHTTP2_METHOD_CONNECT\n} = http2.constants;\n\nconst kHeaders = Symbol('headers');\nconst kOrigin = Symbol('origin');\nconst kSession = Symbol('session');\nconst kOptions = Symbol('options');\nconst kFlushedHeaders = Symbol('flushedHeaders');\nconst kJobs = Symbol('jobs');\n\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\n\nclass ClientRequest extends Writable {\n\tconstructor(input, options, callback) {\n\t\tsuper({\n\t\t\tautoDestroy: false\n\t\t});\n\n\t\tconst hasInput = typeof input === 'string' || input instanceof URL;\n\t\tif (hasInput) {\n\t\t\tinput = urlToOptions(input instanceof URL ? input : new URL(input));\n\t\t}\n\n\t\tif (typeof options === 'function' || options === undefined) {\n\t\t\t// (options, callback)\n\t\t\tcallback = options;\n\t\t\toptions = hasInput ? input : {...input};\n\t\t} else {\n\t\t\t// (input, options, callback)\n\t\t\toptions = {...input, ...options};\n\t\t}\n\n\t\tif (options.h2session) {\n\t\t\tthis[kSession] = options.h2session;\n\t\t} else if (options.agent === false) {\n\t\t\tthis.agent = new Agent({maxFreeSessions: 0});\n\t\t} else if (typeof options.agent === 'undefined' || options.agent === null) {\n\t\t\tif (typeof options.createConnection === 'function') {\n\t\t\t\t// This is a workaround - we don't have to create the session on our own.\n\t\t\t\tthis.agent = new Agent({maxFreeSessions: 0});\n\t\t\t\tthis.agent.createConnection = options.createConnection;\n\t\t\t} else {\n\t\t\t\tthis.agent = globalAgent;\n\t\t\t}\n\t\t} else if (typeof options.agent.request === 'function') {\n\t\t\tthis.agent = options.agent;\n\t\t} else {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('options.agent', ['Agent-like Object', 'undefined', 'false'], options.agent);\n\t\t}\n\n\t\tif (options.protocol && options.protocol !== 'https:') {\n\t\t\tthrow new ERR_INVALID_PROTOCOL(options.protocol, 'https:');\n\t\t}\n\n\t\tconst port = options.port || options.defaultPort || (this.agent && this.agent.defaultPort) || 443;\n\t\tconst host = options.hostname || options.host || 'localhost';\n\n\t\t// Don't enforce the origin via options. It may be changed in an Agent.\n\t\tdelete options.hostname;\n\t\tdelete options.host;\n\t\tdelete options.port;\n\n\t\tconst {timeout} = options;\n\t\toptions.timeout = undefined;\n\n\t\tthis[kHeaders] = Object.create(null);\n\t\tthis[kJobs] = [];\n\n\t\tthis.socket = null;\n\t\tthis.connection = null;\n\n\t\tthis.method = options.method || 'GET';\n\t\tthis.path = options.path;\n\n\t\tthis.res = null;\n\t\tthis.aborted = false;\n\t\tthis.reusedSocket = false;\n\n\t\tif (options.headers) {\n\t\t\tfor (const [header, value] of Object.entries(options.headers)) {\n\t\t\t\tthis.setHeader(header, value);\n\t\t\t}\n\t\t}\n\n\t\tif (options.auth && !('authorization' in this[kHeaders])) {\n\t\t\tthis[kHeaders].authorization = 'Basic ' + Buffer.from(options.auth).toString('base64');\n\t\t}\n\n\t\toptions.session = options.tlsSession;\n\t\toptions.path = options.socketPath;\n\n\t\tthis[kOptions] = options;\n\n\t\t// Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n\t\tif (port === 443) {\n\t\t\tthis[kOrigin] = `https://${host}`;\n\n\t\t\tif (!(':authority' in this[kHeaders])) {\n\t\t\t\tthis[kHeaders][':authority'] = host;\n\t\t\t}\n\t\t} else {\n\t\t\tthis[kOrigin] = `https://${host}:${port}`;\n\n\t\t\tif (!(':authority' in this[kHeaders])) {\n\t\t\t\tthis[kHeaders][':authority'] = `${host}:${port}`;\n\t\t\t}\n\t\t}\n\n\t\tif (timeout) {\n\t\t\tthis.setTimeout(timeout);\n\t\t}\n\n\t\tif (callback) {\n\t\t\tthis.once('response', callback);\n\t\t}\n\n\t\tthis[kFlushedHeaders] = false;\n\t}\n\n\tget method() {\n\t\treturn this[kHeaders][HTTP2_HEADER_METHOD];\n\t}\n\n\tset method(value) {\n\t\tif (value) {\n\t\t\tthis[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn this[kHeaders][HTTP2_HEADER_PATH];\n\t}\n\n\tset path(value) {\n\t\tif (value) {\n\t\t\tthis[kHeaders][HTTP2_HEADER_PATH] = value;\n\t\t}\n\t}\n\n\tget _mustNotHaveABody() {\n\t\treturn this.method === 'GET' || this.method === 'HEAD' || this.method === 'DELETE';\n\t}\n\n\t_write(chunk, encoding, callback) {\n\t\t// https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n\t\tif (this._mustNotHaveABody) {\n\t\t\tcallback(new Error('The GET, HEAD and DELETE methods must NOT have a body'));\n\t\t\t/* istanbul ignore next: Node.js 12 throws directly */\n\t\t\treturn;\n\t\t}\n\n\t\tthis.flushHeaders();\n\n\t\tconst callWrite = () => this._request.write(chunk, encoding, callback);\n\t\tif (this._request) {\n\t\t\tcallWrite();\n\t\t} else {\n\t\t\tthis[kJobs].push(callWrite);\n\t\t}\n\t}\n\n\t_final(callback) {\n\t\tif (this.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.flushHeaders();\n\n\t\tconst callEnd = () => {\n\t\t\t// For GET, HEAD and DELETE\n\t\t\tif (this._mustNotHaveABody) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._request.end(callback);\n\t\t};\n\n\t\tif (this._request) {\n\t\t\tcallEnd();\n\t\t} else {\n\t\t\tthis[kJobs].push(callEnd);\n\t\t}\n\t}\n\n\tabort() {\n\t\tif (this.res && this.res.complete) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.aborted) {\n\t\t\tprocess.nextTick(() => this.emit('abort'));\n\t\t}\n\n\t\tthis.aborted = true;\n\n\t\tthis.destroy();\n\t}\n\n\t_destroy(error, callback) {\n\t\tif (this.res) {\n\t\t\tthis.res._dump();\n\t\t}\n\n\t\tif (this._request) {\n\t\t\tthis._request.destroy();\n\t\t}\n\n\t\tcallback(error);\n\t}\n\n\tasync flushHeaders() {\n\t\tif (this[kFlushedHeaders] || this.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis[kFlushedHeaders] = true;\n\n\t\tconst isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n\n\t\t// The real magic is here\n\t\tconst onStream = stream => {\n\t\t\tthis._request = stream;\n\n\t\t\tif (this.destroyed) {\n\t\t\t\tstream.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n\t\t\tif (!isConnectMethod) {\n\t\t\t\tproxyEvents(stream, this, ['timeout', 'continue', 'close', 'error']);\n\t\t\t}\n\n\t\t\t// Wait for the `finish` event. We don't want to emit the `response` event\n\t\t\t// before `request.end()` is called.\n\t\t\tconst waitForEnd = fn => {\n\t\t\t\treturn (...args) => {\n\t\t\t\t\tif (!this.writable && !this.destroyed) {\n\t\t\t\t\t\tfn(...args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.once('finish', () => {\n\t\t\t\t\t\t\tfn(...args);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t// This event tells we are ready to listen for the data.\n\t\t\tstream.once('response', waitForEnd((headers, flags, rawHeaders) => {\n\t\t\t\t// If we were to emit raw request stream, it would be as fast as the native approach.\n\t\t\t\t// Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n\t\t\t\tconst response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n\t\t\t\tthis.res = response;\n\n\t\t\t\tresponse.req = this;\n\t\t\t\tresponse.statusCode = headers[HTTP2_HEADER_STATUS];\n\t\t\t\tresponse.headers = headers;\n\t\t\t\tresponse.rawHeaders = rawHeaders;\n\n\t\t\t\tresponse.once('end', () => {\n\t\t\t\t\tif (this.aborted) {\n\t\t\t\t\t\tresponse.aborted = true;\n\t\t\t\t\t\tresponse.emit('aborted');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponse.complete = true;\n\n\t\t\t\t\t\t// Has no effect, just be consistent with the Node.js behavior\n\t\t\t\t\t\tresponse.socket = null;\n\t\t\t\t\t\tresponse.connection = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (isConnectMethod) {\n\t\t\t\t\tresponse.upgrade = true;\n\n\t\t\t\t\t// The HTTP1 API says the socket is detached here,\n\t\t\t\t\t// but we can't do that so we pass the original HTTP2 request.\n\t\t\t\t\tif (this.emit('connect', response, stream, Buffer.alloc(0))) {\n\t\t\t\t\t\tthis.emit('close');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No listeners attached, destroy the original request.\n\t\t\t\t\t\tstream.destroy();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Forwards data\n\t\t\t\t\tstream.on('data', chunk => {\n\t\t\t\t\t\tif (!response._dumped && !response.push(chunk)) {\n\t\t\t\t\t\t\tstream.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstream.once('end', () => {\n\t\t\t\t\t\tresponse.push(null);\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!this.emit('response', response)) {\n\t\t\t\t\t\t// No listeners attached, dump the response.\n\t\t\t\t\t\tresponse._dump();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Emits `information` event\n\t\t\tstream.once('headers', waitForEnd(\n\t\t\t\theaders => this.emit('information', {statusCode: headers[HTTP2_HEADER_STATUS]})\n\t\t\t));\n\n\t\t\tstream.once('trailers', waitForEnd((trailers, flags, rawTrailers) => {\n\t\t\t\tconst {res} = this;\n\n\t\t\t\t// Assigns trailers to the response object.\n\t\t\t\tres.trailers = trailers;\n\t\t\t\tres.rawTrailers = rawTrailers;\n\t\t\t}));\n\n\t\t\tconst {socket} = stream.session;\n\t\t\tthis.socket = socket;\n\t\t\tthis.connection = socket;\n\n\t\t\tfor (const job of this[kJobs]) {\n\t\t\t\tjob();\n\t\t\t}\n\n\t\t\tthis.emit('socket', this.socket);\n\t\t};\n\n\t\t// Makes a HTTP2 request\n\t\tif (this[kSession]) {\n\t\t\ttry {\n\t\t\t\tonStream(this[kSession].request(this[kHeaders]));\n\t\t\t} catch (error) {\n\t\t\t\tthis.emit('error', error);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.reusedSocket = true;\n\n\t\t\ttry {\n\t\t\t\tonStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));\n\t\t\t} catch (error) {\n\t\t\t\tthis.emit('error', error);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetHeader(name) {\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('name', 'string', name);\n\t\t}\n\n\t\treturn this[kHeaders][name.toLowerCase()];\n\t}\n\n\tget headersSent() {\n\t\treturn this[kFlushedHeaders];\n\t}\n\n\tremoveHeader(name) {\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('name', 'string', name);\n\t\t}\n\n\t\tif (this.headersSent) {\n\t\t\tthrow new ERR_HTTP_HEADERS_SENT('remove');\n\t\t}\n\n\t\tdelete this[kHeaders][name.toLowerCase()];\n\t}\n\n\tsetHeader(name, value) {\n\t\tif (this.headersSent) {\n\t\t\tthrow new ERR_HTTP_HEADERS_SENT('set');\n\t\t}\n\n\t\tif (typeof name !== 'string' || (!isValidHttpToken.test(name) && !isRequestPseudoHeader(name))) {\n\t\t\tthrow new ERR_INVALID_HTTP_TOKEN('Header name', name);\n\t\t}\n\n\t\tif (typeof value === 'undefined') {\n\t\t\tthrow new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n\t\t}\n\n\t\tif (isInvalidHeaderValue.test(value)) {\n\t\t\tthrow new ERR_INVALID_CHAR('header content', name);\n\t\t}\n\n\t\tthis[kHeaders][name.toLowerCase()] = value;\n\t}\n\n\tsetNoDelay() {\n\t\t// HTTP2 sockets cannot be malformed, do nothing.\n\t}\n\n\tsetSocketKeepAlive() {\n\t\t// HTTP2 sockets cannot be malformed, do nothing.\n\t}\n\n\tsetTimeout(ms, callback) {\n\t\tconst applyTimeout = () => this._request.setTimeout(ms, callback);\n\n\t\tif (this._request) {\n\t\t\tapplyTimeout();\n\t\t} else {\n\t\t\tthis[kJobs].push(applyTimeout);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tget maxHeadersCount() {\n\t\tif (!this.destroyed && this._request) {\n\t\t\treturn this._request.session.localSettings.maxHeaderListSize;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tset maxHeadersCount(_value) {\n\t\t// Updating HTTP2 settings would affect all requests, do nothing.\n\t}\n}\n\nmodule.exports = ClientRequest;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}