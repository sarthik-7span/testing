{"ast":null,"code":"'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst resolveALPN = require('resolve-alpn');\nconst QuickLRU = require('quick-lru');\nconst Http2ClientRequest = require('./client-request');\nconst calculateServerName = require('./utils/calculate-server-name');\nconst urlToOptions = require('./utils/url-to-options');\nconst cache = new QuickLRU({\n  maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options) => {\n  socket._httpMessage = {\n    shouldKeepAlive: true\n  };\n  const onFree = () => {\n    agent.emit('free', socket, options);\n  };\n  socket.on('free', onFree);\n  const onClose = () => {\n    agent.removeSocket(socket, options);\n  };\n  socket.on('close', onClose);\n  const onRemove = () => {\n    agent.removeSocket(socket, options);\n    socket.off('close', onClose);\n    socket.off('free', onFree);\n    socket.off('agentRemove', onRemove);\n  };\n  socket.on('agentRemove', onRemove);\n  agent.emit('free', socket, options);\n};\nconst resolveProtocol = async options => {\n  const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n  if (!cache.has(name)) {\n    if (queue.has(name)) {\n      const result = await queue.get(name);\n      return result.alpnProtocol;\n    }\n    const {\n      path,\n      agent\n    } = options;\n    options.path = options.socketPath;\n    const resultPromise = resolveALPN(options);\n    queue.set(name, resultPromise);\n    try {\n      const {\n        socket,\n        alpnProtocol\n      } = await resultPromise;\n      cache.set(name, alpnProtocol);\n      options.path = path;\n      if (alpnProtocol === 'h2') {\n        // https://github.com/nodejs/node/issues/33343\n        socket.destroy();\n      } else {\n        const {\n          globalAgent\n        } = https;\n        const defaultCreateConnection = https.Agent.prototype.createConnection;\n        if (agent) {\n          if (agent.createConnection === defaultCreateConnection) {\n            installSocket(agent, socket, options);\n          } else {\n            socket.destroy();\n          }\n        } else if (globalAgent.createConnection === defaultCreateConnection) {\n          installSocket(globalAgent, socket, options);\n        } else {\n          socket.destroy();\n        }\n      }\n      queue.delete(name);\n      return alpnProtocol;\n    } catch (error) {\n      queue.delete(name);\n      throw error;\n    }\n  }\n  return cache.get(name);\n};\nmodule.exports = async (input, options, callback) => {\n  if (typeof input === 'string' || input instanceof URL) {\n    input = urlToOptions(new URL(input));\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  options = {\n    ALPNProtocols: ['h2', 'http/1.1'],\n    ...input,\n    ...options,\n    resolveSocket: true\n  };\n  if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n    throw new Error('The `ALPNProtocols` option must be an Array with at least one entry');\n  }\n  options.protocol = options.protocol || 'https:';\n  const isHttps = options.protocol === 'https:';\n  options.host = options.hostname || options.host || 'localhost';\n  options.session = options.tlsSession;\n  options.servername = options.servername || calculateServerName(options);\n  options.port = options.port || (isHttps ? 443 : 80);\n  options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n  const agents = options.agent;\n  if (agents) {\n    if (agents.addRequest) {\n      throw new Error('The `options.agent` object can contain only `http`, `https` or `http2` properties');\n    }\n    options.agent = agents[isHttps ? 'https' : 'http'];\n  }\n  if (isHttps) {\n    const protocol = await resolveProtocol(options);\n    if (protocol === 'h2') {\n      if (agents) {\n        options.agent = agents.http2;\n      }\n      return new Http2ClientRequest(options, callback);\n    }\n  }\n  return http.request(options, callback);\n};\nmodule.exports.protocolCache = cache;","map":{"version":3,"names":["http","require","https","resolveALPN","QuickLRU","Http2ClientRequest","calculateServerName","urlToOptions","cache","maxSize","queue","Map","installSocket","agent","socket","options","_httpMessage","shouldKeepAlive","onFree","emit","on","onClose","removeSocket","onRemove","off","resolveProtocol","name","host","port","ALPNProtocols","sort","has","result","get","alpnProtocol","path","socketPath","resultPromise","set","destroy","globalAgent","defaultCreateConnection","Agent","prototype","createConnection","delete","error","module","exports","input","callback","URL","undefined","resolveSocket","Array","isArray","length","Error","protocol","isHttps","hostname","session","tlsSession","servername","_defaultAgent","agents","addRequest","http2","request","protocolCache"],"sources":["/home/spartan/Documents/vue.js/demo/node_modules/http2-wrapper/source/auto.js"],"sourcesContent":["'use strict';\nconst http = require('http');\nconst https = require('https');\nconst resolveALPN = require('resolve-alpn');\nconst QuickLRU = require('quick-lru');\nconst Http2ClientRequest = require('./client-request');\nconst calculateServerName = require('./utils/calculate-server-name');\nconst urlToOptions = require('./utils/url-to-options');\n\nconst cache = new QuickLRU({maxSize: 100});\nconst queue = new Map();\n\nconst installSocket = (agent, socket, options) => {\n\tsocket._httpMessage = {shouldKeepAlive: true};\n\n\tconst onFree = () => {\n\t\tagent.emit('free', socket, options);\n\t};\n\n\tsocket.on('free', onFree);\n\n\tconst onClose = () => {\n\t\tagent.removeSocket(socket, options);\n\t};\n\n\tsocket.on('close', onClose);\n\n\tconst onRemove = () => {\n\t\tagent.removeSocket(socket, options);\n\t\tsocket.off('close', onClose);\n\t\tsocket.off('free', onFree);\n\t\tsocket.off('agentRemove', onRemove);\n\t};\n\n\tsocket.on('agentRemove', onRemove);\n\n\tagent.emit('free', socket, options);\n};\n\nconst resolveProtocol = async options => {\n\tconst name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n\n\tif (!cache.has(name)) {\n\t\tif (queue.has(name)) {\n\t\t\tconst result = await queue.get(name);\n\t\t\treturn result.alpnProtocol;\n\t\t}\n\n\t\tconst {path, agent} = options;\n\t\toptions.path = options.socketPath;\n\n\t\tconst resultPromise = resolveALPN(options);\n\t\tqueue.set(name, resultPromise);\n\n\t\ttry {\n\t\t\tconst {socket, alpnProtocol} = await resultPromise;\n\t\t\tcache.set(name, alpnProtocol);\n\n\t\t\toptions.path = path;\n\n\t\t\tif (alpnProtocol === 'h2') {\n\t\t\t\t// https://github.com/nodejs/node/issues/33343\n\t\t\t\tsocket.destroy();\n\t\t\t} else {\n\t\t\t\tconst {globalAgent} = https;\n\t\t\t\tconst defaultCreateConnection = https.Agent.prototype.createConnection;\n\n\t\t\t\tif (agent) {\n\t\t\t\t\tif (agent.createConnection === defaultCreateConnection) {\n\t\t\t\t\t\tinstallSocket(agent, socket, options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsocket.destroy();\n\t\t\t\t\t}\n\t\t\t\t} else if (globalAgent.createConnection === defaultCreateConnection) {\n\t\t\t\t\tinstallSocket(globalAgent, socket, options);\n\t\t\t\t} else {\n\t\t\t\t\tsocket.destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tqueue.delete(name);\n\n\t\t\treturn alpnProtocol;\n\t\t} catch (error) {\n\t\t\tqueue.delete(name);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn cache.get(name);\n};\n\nmodule.exports = async (input, options, callback) => {\n\tif (typeof input === 'string' || input instanceof URL) {\n\t\tinput = urlToOptions(new URL(input));\n\t}\n\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = undefined;\n\t}\n\n\toptions = {\n\t\tALPNProtocols: ['h2', 'http/1.1'],\n\t\t...input,\n\t\t...options,\n\t\tresolveSocket: true\n\t};\n\n\tif (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n\t\tthrow new Error('The `ALPNProtocols` option must be an Array with at least one entry');\n\t}\n\n\toptions.protocol = options.protocol || 'https:';\n\tconst isHttps = options.protocol === 'https:';\n\n\toptions.host = options.hostname || options.host || 'localhost';\n\toptions.session = options.tlsSession;\n\toptions.servername = options.servername || calculateServerName(options);\n\toptions.port = options.port || (isHttps ? 443 : 80);\n\toptions._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n\n\tconst agents = options.agent;\n\n\tif (agents) {\n\t\tif (agents.addRequest) {\n\t\t\tthrow new Error('The `options.agent` object can contain only `http`, `https` or `http2` properties');\n\t\t}\n\n\t\toptions.agent = agents[isHttps ? 'https' : 'http'];\n\t}\n\n\tif (isHttps) {\n\t\tconst protocol = await resolveProtocol(options);\n\n\t\tif (protocol === 'h2') {\n\t\t\tif (agents) {\n\t\t\t\toptions.agent = agents.http2;\n\t\t\t}\n\n\t\t\treturn new Http2ClientRequest(options, callback);\n\t\t}\n\t}\n\n\treturn http.request(options, callback);\n};\n\nmodule.exports.protocolCache = cache;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}